import os
import json
import time
import pandas as pd
from pipelines.rag import RAGPipeline
import tests_vars

CONFIGS_DIR = "data/processed/configs"
RESULTS_DIR = "data/processed/respostas"
TIME_RESULTS_DIR = "data/processed/time_results"
MODELS_USED_DIR = "data/processed/modelos_usados"

os.makedirs(RESULTS_DIR, exist_ok=True)
os.makedirs(TIME_RESULTS_DIR, exist_ok=True)
os.makedirs(MODELS_USED_DIR, exist_ok=True)

perguntas = [
    # IBGE
    "Quais s√£o as fun√ß√µes dispon√≠veis no processo seletivo do IBGE e quais os requisitos para cada uma?",
    "Qual o prazo para inscri√ß√µes e a taxa de inscri√ß√£o para o processo seletivo do IBGE?",
    "Como ser√° o processo de avalia√ß√£o e classifica√ß√£o dos candidatos no concurso do IBGE?",
    "Qual o valor da remunera√ß√£o e dos aux√≠lios oferecidos para os cargos dispon√≠veis no IBGE?",

    # Marinha
    "Quais s√£o os requisitos de idade e escolaridade para ingresso na marinha?",
    "Como ser√° composta a Prova Escrita Objetiva e quais os crit√©rios de aprova√ß√£o para o concurso da marinha?",
    "Como funciona o Teste de Aptid√£o F√≠sica de Ingresso (TAF-i) para os candidatos no concurso da marinha?",
    "Quais s√£o as cidades onde ser√£o realizadas as provas e eventos complementares do concurso da marinha?",

    # MPU
    "Quais os cargos dispon√≠veis no concurso do MPU e quantas vagas s√£o oferecidas?",
    "Como ser√° composta a prova objetiva e quais s√£o os crit√©rios de classifica√ß√£o e elimina√ß√£o do concurso do mpu?",
    "Quais s√£o os requisitos m√≠nimos para investidura nos cargos do MPU?",
    "Qual o prazo de validade do concurso do mpu e se pode ser prorrogado?",

    # TRF
    "Quantas vagas est√£o dispon√≠veis para o cargo de Juiz Federal Substituto no TRF?",
    "Como ser√° estruturada a prova oral e quais os crit√©rios de avalia√ß√£o para o concurso do TRF?",
    "Quais s√£o os requisitos m√≠nimos exigidos para concorrer ao cargo de Juiz Federal Substituto do TRF?",
    "Quais etapas comp√µem o concurso do trf e como funciona o sistema de classifica√ß√£o?",

    # AEB
    "Quais os cargos oferecidos no concurso da AEB e quais os requisitos para cada um?",
    "Como ser√° composta a prova objetiva e quais s√£o os crit√©rios de elimina√ß√£o da AEB?",
    "Quais cidades aplicar√£o as provas do concurso da AEB?",
    "Qual √© a jornada de trabalho e o valor da remunera√ß√£o dos cargos da AEB?",

    # Aeron√°utica
    "Qual a idade m√°xima permitida para ingresso no Curso de Forma√ß√£o de Sargentos da Aeron√°utica?",
    "Como funciona o processo de escolha da especialidade dentro do curso da aeron√°utica?",
    "Quais s√£o os crit√©rios de aprova√ß√£o no Teste de Aptid√£o F√≠sica aeron√°utica?",
    "Quais s√£o as etapas do concurso para ingresso na Aeron√°utica?",

    # CCEB
    "Quais s√£o os cargos oferecidos no concurso do CCEB e quais os requisitos m√≠nimos?",
    "Como ser√° composta a prova objetiva e qual o crit√©rio de classifica√ß√£o do CCEB?",
    "Quais estados ter√£o vagas dispon√≠veis para os cargos do CCEB?",
    "Qual a dura√ß√£o do contrato para os aprovados no concurso do CCEB?",

    # FUNAI
    "Quais fun√ß√µes est√£o dispon√≠veis no concurso da FUNAI e quais os requisitos para cada uma?",
    "Como ser√° o processo de avalia√ß√£o e classifica√ß√£o dos candidatos no concurso da FUNAI?",
    "Qual √© o valor da remunera√ß√£o e os benef√≠cios oferecidos para os cargos da FUNAI?",
    "Onde ser√£o realizadas as provas do concurso da FUNAI?",

    # IBAMA
    "Quais s√£o os cargos oferecidos no concurso do IBAMA e quantas vagas est√£o dispon√≠veis?",
    "Como ser√° composta a prova objetiva e quais s√£o os crit√©rios de classifica√ß√£o do concurso do IBAMA?",
    "Qual √© a jornada de trabalho e a remunera√ß√£o inicial para os cargos do IBAMA?",
    "Como ser√° realizada a lota√ß√£o dos aprovados no concurso do IBAMA?",
]


def gerar_respostas():
    """Executa a RAG para todas as configura√ß√µes, salva as respostas e os tempos de execu√ß√£o."""
    if not os.path.exists(CONFIGS_DIR):
        print(f"‚ùå Diret√≥rio de configura√ß√µes n√£o encontrado: {CONFIGS_DIR}")
        return

    for config_name in sorted(os.listdir(CONFIGS_DIR)): 
        config_path = os.path.join(CONFIGS_DIR, config_name)
        chunks_path = os.path.join(config_path, "chunks.csv")
        faiss_path = os.path.join(config_path, "faiss_index_COMPLETED")
        results_filename = os.path.join(RESULTS_DIR, f"{config_name}_respostas.json")
        time_filename = os.path.join(TIME_RESULTS_DIR, f"{config_name}_time_results.json")
        models_filename = os.path.join(MODELS_USED_DIR, f"{config_name}_modelos_usados.json")

        # Se j√° h√° respostas para essa configura√ß√£o, pula
        if os.path.exists(results_filename):
            print(f"üîπ Respostas para {config_name} j√° geradas, pulando...")
            continue

        # Verificar se os arquivos necess√°rios existem
        if not os.path.exists(chunks_path) or not os.path.exists(faiss_path):
            print(f"‚ö†Ô∏è Ignorando configura√ß√£o incompleta: {config_name}")
            continue

        tests_vars.process_indexes(config_name)
        print(f"\nüöÄ Testando configura√ß√£o: {config_name}")

        start_time = time.time()

        try:
            rag = RAGPipeline(config_name)
        except FileNotFoundError as e:
            print(f"‚ùå Erro ao carregar configura√ß√£o {config_name}: {e}")
            continue

        perguntas_respostas_dict = {}
        question_times = {}  # Tempo para cada pergunta
        models_used = {}     # Modelo utilizado para cada pergunta

        for i, pergunta in enumerate(perguntas, 1):
            print(f"\nüîπ [{i}/{len(perguntas)}] Pergunta: {pergunta}")
            t0 = time.time()
            try:
                resposta = rag.generate_answer(pergunta)
                perguntas_respostas_dict[pergunta] = str(resposta)
                # Extrai o modelo usado do prefixo da resposta
                if resposta.startswith("[Model used:"):
                    end_index = resposta.find("]")
                    modelo = resposta[len("[Model used: "):end_index]
                    models_used[pergunta] = modelo
                else:
                    models_used[pergunta] = "Modelo desconhecido"
                print(f"üí¨ Resposta: {resposta}")
            except Exception as e:
                error_msg = str(e)
                print(f"‚ùå Erro ao gerar resposta para '{pergunta}': {error_msg}")
                perguntas_respostas_dict[pergunta] = f"Erro ao gerar resposta: {error_msg}"
                models_used[pergunta] = "Erro"
            t1 = time.time()
            elapsed = t1 - t0
            question_times[pergunta] = elapsed
            print(f"‚è± Tempo para responder: {elapsed:.2f} segundos")

        total_time_questions = sum(question_times.values())
        average_time = total_time_questions / len(question_times) if question_times else 0
        time_results = {
            "individual_times": question_times,
            "total_time": total_time_questions,
            "average_time": average_time
        }

        # Salvar respostas
        with open(results_filename, "w", encoding="utf-8") as f:
            json.dump(perguntas_respostas_dict, f, indent=4, ensure_ascii=False)
        print(f"üìÅ Respostas salvas em: {results_filename}")

        # Salvar tempos de execu√ß√£o
        with open(time_filename, "w", encoding="utf-8") as f:
            json.dump(time_results, f, indent=4, ensure_ascii=False)
        print(f"‚è± Tempos salvos em: {time_filename}")

        # Salvar modelos usados
        with open(models_filename, "w", encoding="utf-8") as f:
            json.dump(models_used, f, indent=4, ensure_ascii=False)
        print(f"üìÑ Modelos usados salvos em: {models_filename}")

        print(f"‚è≥ Tempo total para {config_name}: {time.time() - start_time:.2f} segundos.")

    print("\n‚úÖ Gera√ß√£o de respostas, tempos e modelos conclu√≠da para todas as configura√ß√µes!")

if __name__ == "__main__":
    start_time = time.time()
    gerar_respostas()
    print(f"\n‚è≥ Tempo total de execu√ß√£o: {time.time() - start_time:.2f} segundos.")