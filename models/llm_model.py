from langchain_groq import ChatGroq
import os
import json
import requests
from dotenv import load_dotenv
import tests_vars

load_dotenv()

class LLMModel:
    def __init__(self, model_name=tests_vars.dict_models['ai_model']):
        """
        Inicializa a conexÃ£o com o modelo LLM da Groq.
        - model_name: Modelo a ser utilizado (ex: `llama3-70b-8192` ou `mixtral-8x7b-32768`).
        """
        self.llm = ChatGroq(
            model=model_name,
            api_key=os.getenv("GROQ_API_KEY"),
            temperature=0,
            max_tokens=2000, 
            timeout=None,
            max_retries=2
        )

    def generate_response(self, prompt):
        context = "IBGE - ANEXO I â€“ Quadro de Vagas e Postos de InscriÃ§Ã£o {â€˜FunÃ§Ã£oâ€™: â€˜APMâ€™, â€˜UFâ€™: â€˜ESâ€™, â€˜MunicÃ­pioâ€™: â€˜Cariacicaâ€™, â€˜VAGASâ€™: â€˜2â€™, â€˜ACâ€™: â€˜1â€™, â€˜PPPâ€™: â€˜1â€™, â€˜PcDâ€™: â€˜0â€™, â€˜EndereÃ§o para inscriÃ§Ãµesâ€™: â€˜Av. Nossa Sra. dos Navegantes, 675 (EdifÃ­cio PalÃ¡cio do CafÃ©), 9Âº andar - Enseada do SuÃ¡. VitÃ³ria/ESâ€™}, {â€˜FunÃ§Ã£oâ€™: â€˜APMâ€™, â€˜UFâ€™: â€˜ESâ€™, â€˜MunicÃ­pioâ€™: â€˜VitÃ³riaâ€™, â€˜VAGASâ€™: â€˜12â€™, â€˜ACâ€™: â€˜8â€™, â€˜PPPâ€™: â€˜2â€™, â€˜PcDâ€™: â€˜2â€™, â€˜EndereÃ§o para inscriÃ§Ãµesâ€™: â€˜Av. Nossa Sra. dos Navegantes, 675 (EdifÃ­cio PalÃ¡cio do CafÃ©), 9Âº andar - Enseada do SuÃ¡. VitÃ³ria/ESâ€™}, {â€˜FunÃ§Ã£oâ€™: â€˜APMâ€™, â€˜UFâ€™: â€˜MGâ€™, â€˜MunicÃ­pioâ€™: â€˜Ituramaâ€™, â€˜VAGASâ€™: â€˜2â€™, â€˜ACâ€™: â€˜1â€™, â€˜PPPâ€™: â€˜1â€™, â€˜PcDâ€™: â€˜0â€™, â€˜EndereÃ§o para inscriÃ§Ãµesâ€™: â€˜Rua Armando Fratari, 867, Vila OlÃ­mpica. Iturama/MGâ€™}, {â€˜FunÃ§Ã£oâ€™: â€˜APMâ€™, â€˜UFâ€™: â€˜MSâ€™, â€˜MunicÃ­pioâ€™: â€˜Campo Grandeâ€™, â€˜VAGASâ€™: â€˜7â€™, â€˜ACâ€™: â€˜6â€™, â€˜PPPâ€™: â€˜1â€™, â€˜PcDâ€™: â€˜0â€™, â€˜EndereÃ§o para inscriÃ§Ãµesâ€™: â€˜Rua BarÃ£o do Rio Branco, 1431, Centro. Campo Grande/MSâ€™}, {â€˜FunÃ§Ã£oâ€™: â€˜APMâ€™, â€˜UFâ€™: â€˜SCâ€™, â€˜MunicÃ­pioâ€™: â€˜ConcÃ³rdiaâ€™, â€˜VAGASâ€™: â€˜5â€™, â€˜ACâ€™: â€˜4â€™, â€˜PPPâ€™: â€˜1â€™, â€˜PcDâ€™: â€˜0â€™, â€˜EndereÃ§o para inscriÃ§Ãµesâ€™: â€˜Rua Marechal Deodoro, 772, Centro. ConcÃ³rdia/SCâ€™}, {â€˜FunÃ§Ã£oâ€™: â€˜APMâ€™, â€˜UFâ€™: â€˜SCâ€™, â€˜MunicÃ­pioâ€™: â€˜Rio do Sulâ€™, â€˜VAGASâ€™: â€˜1â€™, â€˜ACâ€™: â€˜1â€™, â€˜PPPâ€™: â€˜0â€™, â€˜PcDâ€™: â€˜0â€™, â€˜EndereÃ§o para inscriÃ§Ãµesâ€™: â€˜Rua Tuiuti, 20, salas 401 e 402, Centro. Rio do Sul/SCâ€™}, {â€˜FunÃ§Ã£oâ€™: â€˜SCQâ€™, â€˜UFâ€™: â€˜SCâ€™, â€˜MunicÃ­pioâ€™: â€˜Palmitosâ€™, â€˜VAGASâ€™: â€˜1â€™, â€˜ACâ€™: â€˜1â€™, â€˜PPPâ€™: â€˜0â€™, â€˜PcDâ€™: â€˜0â€™, â€˜EndereÃ§o para inscriÃ§Ãµesâ€™: â€˜Rua Visconde de Rio Branco, 932, sala 102, Centro. Palmitos/SCâ€™}"
        promp1 = f"Baseando-se somente nos seguintes textos:{context}\n\n responda: Quais sÃ£o os quadros de vagas e postos de inscriÃ§Ã£o para o ibge?"
        system = """VocÃª Ã© um assistente especializado em concursos pÃºblicos e estudos para provas.  
Responda **apenas em portuguÃªs** e de forma **clara e objetiva**.  

ðŸ“Œ **Regras de resposta:**  
- Se a pergunta nÃ£o estiver relacionada a concursos ou estudos, diga que nÃ£o pode ajudar.  
- Se nÃ£o souber a resposta, apenas diga **"NÃ£o tenho essa informaÃ§Ã£o."**  
- Se houver repetiÃ§Ã£o de informaÃ§Ãµes no contexto, mencione cada item **apenas uma vez**.  
- Se houver leis, artigos ou regras nos editais, priorize a informaÃ§Ã£o mais recente.  
- Sempre que possÃ­vel, explique **com base no edital e em regras oficiais**.  

ðŸ”Ž **Exemplo de comportamento esperado:**  
âœ… **UsuÃ¡rio:** "Quantas vagas hÃ¡ para o cargo X?"  
âœ… **Assistente:** "O edital informa que hÃ¡ 30 vagas para o cargo X."  

ðŸš« **UsuÃ¡rio:** "Me fale sobre esportes."  
ðŸš« **Assistente:** "Eu sou especializado apenas em concursos pÃºblicos e estudos."  
"""
        messages = [('system', system),
                    ("human", prompt)]
        try:
            resposta = self.llm.invoke(messages).content
        except Exception as e:
            print(f"Erro ao processar: {e}")

        return resposta


class LocalLLMModel:
    def __init__(self, model_name= "llama3.2:latest", url= "http://localhost:11434/api/generate"):
        self.model_name = model_name
        self.url = url
        

    def generate_response(self, prompt):
        payload = {
            'model' : self.model_name,
            'system': """VocÃª Ã© um especialista em concursos pÃºblicos, ajude a responder as dÃºvidas, e caso nÃ£o sabia, nÃ£o responda.""",
            'prompt': prompt,
        }
        llm_response = ''

        with requests.post("http://localhost:11434/api/generate", json=payload, stream=True) as response:
            for line in response.iter_lines():
                if line:
                    data = json.loads(line.decode("utf-8"))
                    #print(data.get("response", ""), end="", flush=True)
                    llm_response = llm_response + data.get("response", "")
        #print(llm_response)
        return llm_response
        


class LLMReviewerModel(LLMModel):
    def __init__(self, model_name='llama3-70b-8192'):
        """
        Inicializa a conexÃ£o com o modelo LLM da Groq.
        - model_name: Modelo a ser utilizado (ex: `llama3-70b-8192` ou `mixtral-8x7b-32768`).
        """
        super().__init__(model_name)

    def generate_response(self, prompt):
        system = """VocÃª Ã© um avaliador de respostas. Sua tarefa Ã© analisar a qualidade de uma resposta com base na pergunta feita e atribuir uma nota de 0 a 10, considerando os seguintes critÃ©rios:

1. **PrecisÃ£o**: A resposta estÃ¡ correta e alinhada com a pergunta?
2. **Completude**: A resposta fornece todas as informaÃ§Ãµes necessÃ¡rias?
3. **RelevÃ¢ncia**: A resposta Ã© relevante para a pergunta feita?
4. **Clareza**: A resposta Ã© clara e bem estruturada?

### **InstruÃ§Ãµes**
- Atribua uma nota de **0 a 10** para a resposta.
- Responda **APENAS COM O NÃšMERO DA NOTA**, sem justificativas, explicaÃ§Ãµes ou texto adicional.
- Penalize respostas vagas, evasivas ou que indicam falta de informaÃ§Ã£o:
  - Se a resposta disser "NÃ£o sei" ou nÃ£o fornecer qualquer dado Ãºtil, a nota deve ser **0**.
  - Se a resposta for genÃ©rica e nÃ£o agregar valor, a nota deve ser no mÃ¡ximo **2**.
  - Respostas parcialmente corretas, mas com falta de detalhes essenciais, devem ter notas entre **3 e 6**.
  - Apenas respostas completas e corretas devem receber **8 a 10**.

### **Exemplos**
Pergunta: "Qual Ã© a data da inscriÃ§Ã£o para o concurso da AeronÃ¡utica?"
Resposta: "O perÃ­odo de inscriÃ§Ã£o para o concurso da AeronÃ¡utica (CFS 1/2026) Ã© de 15/01/2025 a 14/02/2025."
Nota: 10

Pergunta: "Qual Ã© o salÃ¡rio para o concurso da AeronÃ¡utica?"
Resposta: "O texto fornecido nÃ£o especifica o salÃ¡rio para o concurso da AeronÃ¡utica. Para obter informaÃ§Ãµes sobre o salÃ¡rio, Ã© recomendado consultar o site oficial da AeronÃ¡utica ou entrar em contato com o ServiÃ§o de Recrutamento e Preparo de Pessoal da AeronÃ¡utica (SEREP) pelos telefones fornecidos no texto."
Nota: 2

Pergunta: "Qual Ã© a data da inscriÃ§Ã£o para o concurso da AeronÃ¡utica?"
Resposta: "NÃ£o sei."
Nota: 0

Pergunta: "Quais sÃ£o os requisitos para o concurso?"
Resposta: "Os requisitos variam conforme o edital. Recomenda-se verificar diretamente no site da AeronÃ¡utica."
Nota: 1
"""
        messages = [('system', system),
                    ("human", prompt)]
        try:
            resposta = self.llm.invoke(messages).content
        except Exception as e:
            print(f"Erro ao processar: {e}")

        return resposta




# Teste
if __name__ == "__main__":
    model = LLMModel()
    resposta = model.generate_response("Quais sÃ£o os concursos pÃºblicos com inscriÃ§Ãµes abertas?")
    print(f"Resposta do modelo: {resposta}")
